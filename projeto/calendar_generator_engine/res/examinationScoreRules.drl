/*
 * Copyright 2010 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package examination.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import examination.domain.*;


global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "differentPeriodsSameExam"
    when
        RoomPeriod(exam != null, $period : period, $exam : exam)
        RoomPeriod($exam == exam, $period != period)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//the penalty is the number of periods coincidentes
//TODO: it only considers the regent. should the auxiliars be considered too?
//TODO: this rule isn't working due to the correction made on the implementation of the UML
/*
rule "professorUnavailable"
    when
        RoomPeriod(exam != null, $professorId : ((Regent)((Topic) exam.getTopic()).getRegent()).getId(), $period : period)
        ProfessorUnavailable( $professorId == ((Regent)((Topic)exam.getTopic()).getRegent()).getId(), $periodList : periods)
        $totalPeriods : Number() from accumulate (
            $unavailablePeriod : Period(dayIndex == $period.dayIndex, time == $period.time ) from $periodList,
            count($unavailablePeriod)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -$totalPeriods.intValue());
end*/

rule "notEnoughRoomsForExam"
    when
        $exam : Exam($numStudents : numStudents)
        $totalCapacity : Number(intValue < $numStudents) from accumulate (
            RoomPeriod(exam == $exam, $room : room),
            sum($room.getCapacity())
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, $totalCapacity.intValue() - $numStudents);
end

//TODO: verify year atribution. why does it create some sort of error?
rule "sameYearTooCloseExams"
    when
        RoomPeriod(exam != null, $id1 : getId(), $exam : exam, $year : ((Topic)exam.getTopic()).getYear(), $leftDayIndex : period.getDayIndex())
        RoomPeriod(exam != null, id > $id1, $exam != exam, $year == ((Topic)exam.getTopic()).getYear(), Math.abs($leftDayIndex - period.getDayIndex()) < 2)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "pcExamsNotInPcRooms"
    when
        RoomPeriod(exam != null, exam.getPC() != room.isPc())
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "gapBetweenSameTopicExams"
    when
        $exam1 : Exam($topic : topic)
        $exam2 : Exam(id < $exam1.getId(), $topic == topic)
        RoomPeriod($exam1 == exam, $id1 : getId(), $leftDayIndex : period.getDayIndex())
        RoomPeriod($exam2 == exam, id > $id1, $rightDayIndex : period.getDayIndex())
        //$dist : Number(intValue < 14) from Math.abs($leftDayIndex - $rightDayIndex)
        Number(intValue < 14) from Math.abs($leftDayIndex - $rightDayIndex)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
        //scoreHolder.addHardConstraintMatch(kcontext, $dist.intValue() - 14); SLOWER
end

//exam != null
//exams with different topics
//exams with same students
//giant penalty, because two exams for the same student can NEVER be at the same time
//TODO: TopicConflit
rule "examsWithSameStudentsAtSamePeriods"
    when
        RoomPeriod($period : period, $id1 : getId(), exam != null, $leftTopic : exam.getTopic())
        RoomPeriod($period == period, id > $id1, $rightTopic : exam.getTopic())
        TopicConflict($leftTopic == leftTopic, $rightTopic == rightTopic, studentSize > 0, $studentSize : studentSize)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -$studentSize);
end

// ############################################################################
// Soft constraints
// ############################################################################

// 20% done
// TODO: penalty doesn't consider the number of students and there shouldn't be more than a periodPenalty applied to the same exam
rule "periodPenalty"
    when
        $period : Period(penalty != 0)
        $roomPeriod : RoomPeriod(exam != null, period == $period)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -$period.getPenalty());
end