/*
 * Copyright 2010 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package examcalendar.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import examcalendar.optimizer.domain.*;


global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

// The same exam can't be scheduled at different periods
rule "differentPeriodsSameExam"
    when
        RoomPeriod(exam != null, $period : period, $exam : exam)
        RoomPeriod($exam == exam, $period != period)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

//An exam can't be scheduled when a professor is unavailable
rule "professorUnavailable"
    when
        ProfessorUnavailable($professor : professor, $period : period)
        TopicProfessor($topic : topic, $professor == professor)
        RoomPeriod(exam != null, $topic == exam.getTopic(), $period == getPeriod())
    then
        scoreHolder.addHardConstraintMatch(kcontext, -100);
end

// An exam must to have rooms with enough space for all of it's students
rule "notEnoughRoomsForExam"
    when
        $exam : Exam($numStudents : numStudents)
        $num2 : Number() from $numStudents
        $totalCapacity : Number(intValue < $numStudents) from accumulate (
            RoomPeriod(exam == $exam, $room : room),
            sum($room.getCapacity())
        )
    then
        //scoreHolder.addHardConstraintMatch(kcontext, $totalCapacity.intValue() - $numStudents);
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// The difference of days between the date of two exams of the same year must be bigger than InstitutionParametrization.minDaysBetweenSameYearExams
rule "sameYearTooCloseExams"
    when
        $institutionParametrization : InstitutionParametrization(minDaysBetweenSameYearExams > 0)
        RoomPeriod(exam != null, $id1 : getId(), $exam : exam, $leftTopic : exam.getTopic(), $year : exam.topic.getYear(), $leftDayIndex : period.getDayIndex())
        RoomPeriod(exam != null, id > $id1, $exam != exam, $rightTopic : exam.getTopic(), $year == exam.topic.getYear(), Math.abs(period.getDayIndex() - $leftDayIndex) < $institutionParametrization.minDaysBetweenSameYearExams)
        TopicConflict($leftTopic == leftTopic, $rightTopic == rightTopic, studentSize > 0, $studentSize : studentSize)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -100);
end

// PC Exams must be scheduled in a PC Room
rule "pcExamsNotInPcRooms"
    when
        RoomPeriod(exam != null, exam.getPC() != room.isPc())
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1000);
end

// The difference of days between Normal Exams and Appeal Exams of the same topic must be bigger than InstitutionParametrization.minDaysBetweenSameTopicExams
rule "gapBetweenSameTopicExams"
    when
        $institutionParametrization : InstitutionParametrization(minDaysBetweenSameTopicExams > 0)
        RoomPeriod(exam != null, $id1 : getId(), $leftDayIndex : period.getDayIndex(), exam.isNormal(), $topic : exam.getTopic())
        RoomPeriod(exam != null, id > $id1, exam.isAppeal(), $topic == exam.getTopic(), period.getDayIndex() - $leftDayIndex < $institutionParametrization.minDaysBetweenSameTopicExams)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
        //scoreHolder.addHardConstraintMatch(kcontext, $dist.intValue() - 14); SLOWER
end

// A student can't have two exams at the same time
rule "examsWithSameStudentsAtSamePeriods"
    when
        RoomPeriod($period : period, $id1 : getId(), exam != null, $leftTopic : exam.getTopic())
        RoomPeriod($period == period, id > $id1, exam != null, $rightTopic : exam.getTopic())
        TopicConflict($leftTopic == leftTopic, $rightTopic == rightTopic, studentSize > 0, $studentSize : studentSize)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// A professor can't be in two exams at the same time
rule "examsWithSameProfessorAtSamePeriods"
    when
        RoomPeriod($period : period, $id1 : getId(), exam != null, $leftTopic : exam.getTopic())
        RoomPeriod($period == period, id > $id1, exam != null, $rightTopic : exam.getTopic())
        TopicProfessor($professor : professor, topic == $leftTopic)
        TopicProfessor($professor == professor, topic == $rightTopic)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "examInWrongSeason"
    when RoomPeriod(exam != null, exam.isNormal() != period.isNormal())
    then scoreHolder.addHardConstraintMatch(kcontext, -1000);
end

// ############################################################################
// Soft constraints
// ############################################################################

// Prioritize exams according to the time of the day, the earlier the better
rule "periodPenalty"
    when
        $institutionParametrization : InstitutionParametrization(periodPenalty != 0)
        $period : Period(penalty != 0)
        $roomPeriod : RoomPeriod(exam != null, $exam : exam, period == $period, $id : id)
        not(exists(RoomPeriod(exam == $exam, $id >  id)))
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - (int) ($period.getPenalty() * $exam.getNumStudents() * $institutionParametrization.getPeriodPenalty()));
end

// Tries to spread the exams from one another as much as possible, giving priority to the most difficult exams. Exams separated by more than a week are not considered.
rule "periodSpread"
    when
        $institutionParametrization : InstitutionParametrization(spreadPenalty != 0)
        RoomPeriod(exam != null, $leftDayIndex : period.getDayIndex(), $leftExam : exam, $difficultyA : exam.getTopic().getDifficulty(), $leftId : id)
        RoomPeriod(exam != null, exam != $leftExam, $rightExam : exam, $rightDayIndex : period.getDayIndex(), $difficultyB: exam.getTopic().getDifficulty(), $rigthId : id)
        $dist : Float(intValue < 7) from Math.abs($leftDayIndex - $rightDayIndex)
        $difficultyRate : Float() from $difficultyA*$difficultyB*$institutionParametrization.getDifficultyPenalty()
        TopicConflict($leftExam.getTopic() == leftTopic, $rightExam.getTopic() == rightTopic, studentSize > 0, $studentSize : studentSize)
        not(exists(RoomPeriod(exam == $leftExam, $leftId > id)))
        not(exists(RoomPeriod(exam == $rightExam, $rigthId > id)))
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - (int) (($difficultyRate*$studentSize / $dist) * $institutionParametrization.getSpreadPenalty()) );
end